Questions:

From the document. ask questions.

Sleepy Character Driver:
sleepy.c
sleepy.h

Q.1. What do the above two files currently do when you do a make? creates 9 drivers 
when loaded into the kernel
Q.2. How do you run the current given device driver ?
write to the device driver to see the workflow

Q.3. When the Linux kernel invokes functions in this driver, a number will be provided 
to indicate which device is being communicated with. 
- it indicates the device number

It is up to you to keep these devices separated from each other in the code that you write.
Yes, you have to keep different wait queues for each instance of the drivers.

In sleepy.h
Q. Does it create 10 drivers? 0 to 9
Q. What is cdev? Not sure
Q. Shouldn't the buffer_size be equal to block_size? Not sure
Q. Each device will have the structure, sleepy_dev? Yes
Q. wait_event_interruptible_timeout wake_up_interruptible is the 

Test Scripts that write to these device driver. 

Q.1. How should start writing the script
Q.2. Should I write a C file that invokes the files in the driver? we have to use the 
read / write systems calls. 
Use the same system calls in this. fopen, open

Write a user-mode program that opens one of these files and reads/writes it.
Q.3. We have to keep different wait queues for each of the instances of the device driver.
How would I do that?


Q.4. I am confused as with the drivers. Do I need to write the files in the drivers

Questions to ask for sure?

Question 1:
A follow-up question on this part. Specifically, this statement:
 - If a process writes a 4-byte integer to a sleepy device, it is put to sleep for the 
number of seconds stored in the integer (if the value is negative, no sleep is performed).

- In case, of a negative number written, no sleep is performed. 
What should the return value be? Should it be 0 or -EINVAL?

- I am just reading an integer and parsing the argument as integer. First checking if the 
size of the variable is 4 bytes, then going forward, else not going forward.

Question 2:

In case of my kernel code, I get the value of -EINVAL as -22 and printing that value in 
kernel code:
Output: Kernel: Error Code is: -22

However, when I print the number of bytes written from the user code, I get as:
Output: User Code: Bytes written are: 18446744073709551615

But when I do:
printf("Error Code is: %s \n", strerror(errno));
I get: Output: Error Code is: Invalid argument

How should change the value of the return value to reflect an error has occured.

Question 3:
Shouldn't we write the 4 byte integer into the dev->data field  and then sleep that process 
for those many seconds so that another process who reads from the device driver, can access 
the value stored into the device driver and thus calculate the number of seconds yet remaining?
Show how you have done it, ask whether it is right or now. wait_event_interruptible_timeout() 
discussion forum.

Question 4:
When the write function is called, one instance of the struct sleepy_dev is created for every
instance, or is it just one struct for every device driver meaning, are there only 10
structs created and any time the process is called, it is put into the wait queue.
After I call wake_up_interruptible, the processes in the queue are called and the time remaining
in the processes is returned. Where is it returned?

Question 5:
Do I need use copy_to_user()?


